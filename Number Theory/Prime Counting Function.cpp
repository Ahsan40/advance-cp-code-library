#include<bits/stdc++.h>

using namespace std;

#define fRead(x)        freopen(x,"r",stdin)
#define fWrite(x)       freopen (x,"w",stdout)

#define LL              long long
#define ULL             unsigned long long
#define ff              first
#define ss              second
#define pb              push_back
#define PI              acos(-1.0)
#define mk              make_pair
#define pii             pair<int,int>
#define pll             pair<LL,LL>


#define min3(a,b,c)     min(a,min(b,c))
#define max3(a,b,c)     max(a,max(b,c))
#define min4(a,b,c,d)   min(a,min(b,min(c,d)))
#define max4(a,b,c,d)   max(a,max(b,max(c,d)))
#define SQR(a)          ((a)*(a))
#define FOR(i,a,b)      for(int i=a;i<=b;i++)
#define ROF(i,a,b)      for(int i=a;i>=b;i--)
#define REP(i,b)        for(int i=0;i<b;i++)
#define MEM(a,x)        memset(a,x,sizeof(a))
#define ABS(x)          ((x)<0?-(x):(x))

#define SORT(v)         sort(v.begin(),v.end())
#define REV(v)          reverse(v.begin(),v.end())
//#pragma GCC target ("avx2")
//#pragma GCC optimization ("O3")
//#pragma GCC optimization ("unroll-loops")
//#pragma comment(linker, "/stack:200000000")
//#pragma GCC optimize("Ofast")
//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#define FastRead        ios_base::sync_with_stdio(0);cin.tie(nullptr);
#ifdef VAMP
     #define debug(...) __f(#__VA_ARGS__, __VA_ARGS__)
    template < typename Arg1 >
    void __f(const char* name, Arg1&& arg1){
        cout << name << " = " << arg1 << std::endl;
    }
    template < typename Arg1, typename... Args>
    void __f(const char* names, Arg1&& arg1, Args&&... args){
        const char* comma = strchr(names+1, ',');
        cout.write(names, comma - names) << " = " << arg1 <<" | ";
        __f(comma+1, args...);
    }
#else
    #define debug(...)
#endif

namespace pcf{
    ///   Prime-Counting Function
    ///   initialize once by calling init()
    ///   Legendre(n) and Lehmer(n) returns the number of primes less than or equal to n
    ///   Lehmer(n) is faster

    #define MAXN 1000010 /// initial sieve limit
    #define MAX_PRIMES 1000010 /// max size of the prime array for sieve
    #define PHI_N 100000
    #define PHI_K 100

    unsigned int ar[(MAXN >> 6) + 5] = {0};
    int len = 0; /// total number of primes generated by sieve
    int primes[MAX_PRIMES];
    int counter[MAXN]; /// counter[m] --> number of primes <= i
    int phi_dp[PHI_N][PHI_K]; /// precal of phi(n,k)

	bitset <MAXN> isComp;
	//bool isComp[MAXN];
    void Sieve(int N){
        int  i,j,sq = sqrt(N);
        isComp[1] = true;
        for(i=4;i<=N;i+=2) isComp[i] = true;
        for(i=3;i<=sq;i+=2){
            if(!isComp[i]){
                for(j=i*i;j<=N;j+=i+i) isComp[j] = 1;
            }
        }
        for (i = 1; i <= N; i++){
            if (!isComp[i]) primes[len++] = i;
            counter[i] = len;
        }
    }

    void init(){
        Sieve(MAXN - 1);

        /// precalculation of phi upto size (PHI_N,PHI_K)
        int k , n , res;
        for(n = 0; n < PHI_N; n++) phi_dp[n][0] = n;
        for (k = 1; k < PHI_K; k++){
            for (n = 0; n < PHI_N; n++){
                phi_dp[n][k] = phi_dp[n][k - 1] - phi_dp[n / primes[k - 1]][k - 1];
            }
        }
    }

    /// returns number of integers less or equal n which are
    /// not divisible by any of the first k primes
    /// recurrence --> phi( n , k ) = phi( n , k-1 ) - phi( n / p_k , k-1)
    long long phi(long long n, int k){
        if (n < PHI_N && k < PHI_K) return phi_dp[n][k];
        if (k == 1) return ((++n) >> 1);
        if (primes[k - 1] >= n) return 1;
        return phi(n, k - 1) - phi(n / primes[k - 1], k - 1);
    }


    long long Legendre(long long n){
        if (n < MAXN) return counter[n];

        int lim = sqrt(n) + 1;
        int k = upper_bound(primes, primes + len, lim) - primes;
        return phi(n, k) + (k - 1);
    }

    ///complexity: n^(2/3).(logn)^(1/3)
    long long Lehmer(long long n){
        if (n < MAXN) return counter[n];

        long long w , res = 0;
        int i, j, a, b, c, lim;
        b = sqrt(n), c = Lehmer(cbrt(n)), a = Lehmer(sqrt(b)), b = Lehmer(b);
        res = phi(n, a) + (((b + a - 2) * (b - a + 1)) >> 1);

        for (i = a; i < b; i++){
            w = n / primes[i];
            lim = Lehmer(sqrt(w)), res -= Lehmer(w);

            if (i <= c){
                for (j = i; j < lim; j++){
                    res += j;
                    res -= Lehmer(w / primes[j]);
                }
            }
        }
        return res;
    }
}


int main()
{
    #ifdef VAMP
        clock_t tStart = clock();
        freopen("input.txt", "r", stdin);
        freopen("output.txt", "w", stdout);
    #endif

    #ifdef VAMP
        fprintf(stderr, "\n>> Runtime: %.10fs\n", (double) (clock() - tStart) / CLOCKS_PER_SEC);
    #endif
}
